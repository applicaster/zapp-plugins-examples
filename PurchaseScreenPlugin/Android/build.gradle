apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { // Applicaster
        credentials {
            username System.getenv("MAVEN_USERNAME")
            password System.getenv("MAVEN_PASSWORD")
        }
        url 'https://dl.bintray.com/applicaster-ltd/maven'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Applicaster SDK
    def applicasterSDKPath = 'com.applicaster:applicaster-android-sdk:4.0.+'

    // Check if an open SDK is defined - if not use the closed one.
    def devSDK = findProject(':applicaster-android-sdk')
    if(devSDK != null){
        implementation project(path: ':applicaster-android-sdk')
    }
    else{
        implementation (applicasterSDKPath)
    }

    implementation 'com.applicaster:applicaster-iap-framework:0.0.1'

    def supportLibVersion = '28.0.0'
    implementation 'com.android.support:appcompat-v7:${supportLibVersion}'
    implementation 'com.android.support.constraint:constraint-layout:${supportLibVersion}'
    implementation 'com.android.support:recyclerview-v7:${supportLibVersion}'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


buildscript {
    ext.kotlin_version = '1.2.0'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


//---------------------------------- Bintray ----------------------------------//
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP

            def versionFromTag = getVersionName()
            if (versionFromTag != null) {
                // There is a tag existing on the current commit - we can upload to Bintray
                version versionFromTag

                artifactId ARTIFACT_ID
                artifact ("build/outputs/aar/${project.getName()}-release.aar") {
                    builtBy assembleRelease
                }
                artifact androidJavadocsJar
                artifact androidSourcesJar
                pom.withXml {
                    Node root = asNode()
                    root.appendNode('name', ARTIFACT_ID)
                    root.appendNode('description', POM_DESCRIPTION)
                    root.appendNode('url', POM_URL)

                    def issues = root.appendNode('issueManagement')
                    issues.appendNode('system', 'github')
                    issues.appendNode('url', ISSUE_URL)

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', POM_SCM_URL)
                    scm.appendNode('connection', POM_SCM_CONNECTION)
                    scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', POM_LICENCE_NAME)
                    license.appendNode('url', POM_LICENCE_URL)
                    license.appendNode('distribution', POM_LICENCE_DIST)

                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', POM_DEVELOPER_ID)
                    developer.appendNode('name', POM_DEVELOPER_NAME)
                    developer.appendNode('email', POM_DEVELOPER_EMAIL)

                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.api.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.implementation.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    override = true
    pkg {
        repo = 'maven'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version {
            name = getVersionName()
            vcsTag = 'v' + getVersionName()
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives androidJar
}
